<?php
namespace app\api\controller;
use \think\File;
use \think\Db;
use \think\Model;
use \think\Request;
class User extends Online
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //if($this->online['role_id']<2){
        // $this->returnMsg['message']='抱歉,您的账号还未成为代理';
        // return $this->returnMsg;
        //}
    }


    //代理商户信息
    public function index(){
        if(request()->isPost()){

            $user_id=input('post.phone');
            $merchant_data=model('user')
                ->alias('a')
                ->join('role b','a.role_id=b.role_id')
                ->where('a.user_id',$user_id)
                ->field('a.balance,a.integral,a.underling,a.user_type,b.settle_rate,indirect')
                ->find();
            //$this->returnMsg['message']=$merchant_data['balance'];
            //return $this->returnMsg;
            //未结算分润
			if($this->sye_rate['period']==0){
                $period_time=0;
            }else{
                $period_time=strtotime( $this->sye_rate['period'].'day' );
            }


			//不可提现余额
            $not_account=Db::table('commission')
                ->where('user_id',$user_id)
                ->where('commission_time','>',(time()-$period_time))
                ->where('commission_time','<',time())
                //->fetchSql(true)
                ->sum('commission_money');
            $not_account=empty($not_account)?0:round( $not_account *100 )/100;
            //可提现余额


            //余额
            $balance=db('commission')
                ->where('user_id',$user_id)
                ->sum('commission_money');
            //已提现余额
            $withdraw_count=db('pay_orders')
                ->where('user_id',$user_id)
                ->where('pay_status',"PAY_SUCCESS")
                ->whereOr('pay_status','PAY_SUBMIT')
                ->sum('pay_money');

            $balance_count=$balance-$withdraw_count-($not_account);
            if($balance_count<0)$balance_count=0;
            if($balance_count<0){
                $balance_count=0;
            }




            $this->returnMsg['data']['integral']=$merchant_data['integral'];
            $this->returnMsg['data']['underling']=$merchant_data['underling'];

            $this->returnMsg['data']['not_account']=$not_account;
            $this->returnMsg['data']['balance_count']=$balance_count;

            $this->returnMsg['message']='请求成功';

            $this->returnMsg['status']=200;
            return $this->returnMsg;
        }
    }

    //抽成记录
    public function get_profit(){
        if(request()->isPost()){

            $page=input('page',1);
            $page=!empty(input('page'))?input('page'):1;
            $start_count=($page-1)*config('api_page_count');
            $profit_list=Db::table('commission')
                ->where('user_id',$this->online['user_id'])
                ->where('commission_money','>',0)
                ->order('commission_time desc')
                ->limit($start_count,config('api_page_count'))
                ->select();
            $this->returnMsg['data']['page']=$page;
            //if(empty($underling_list)){
            //$this->returnMsg['message']='没有数据了';
            //return $this->returnMsg;
            //}
            $this->returnMsg['end_page']=0;
            if(count($profit_list)<config('api_page_count')){
                $this->returnMsg['end_page']=1;
            }
            foreach($profit_list as $key =>$val){
                $profit_list[$key]['commission_time']=date("Y-m-d H:i:s",$val['commission_time']);

            }
            $this->returnMsg['status']=200;
            $this->returnMsg['message']='请求成功';
            $this->returnMsg['data']['profit_list']=$profit_list;

            return $this->returnMsg;
        }elseif(request()->isGet()){
            $user_id=$this->online['user_id'];
            //最近7天
            $total_account=Db::table('commission')
                ->where('user_id',$user_id)
                ->field('sum(commission_money) as sum')
                //->fetchSql(true)
                ->find()['sum'];

				
			if($this->sye_rate['period']==0){
                $period_time=0;
            }else{
                $period_time=strtotime( $this->sye_rate['period'].'day' );
            }
            //最近7天
            $hebdomad_account=Db::table('commission')
                ->where('user_id',$user_id)
                ->where('commission_time','>',(time()-$period_time))
                ->where('commission_time','<',time())
                ->field('sum(commission_money) as sum')
                //->fetchSql(true)
                ->find()['sum'];
            $hebdomad_account=empty($hebdomad_account)?0:$hebdomad_account;

            //最近一个月
            $month_account=Db::table('commission')
                ->where('user_id',$user_id)
                ->where('commission_time','>',(time()-strtotime('-30 day')))
                ->where('commission_time','<',time())
                ->field('sum(commission_money) as sum')
                //->fetchSql(true)
                ->find()['sum'];
            $month_account=empty($month_account)?0:$month_account;



            $this->returnMsg['data']['hebdomad_account']=$hebdomad_account;
            $this->returnMsg['data']['month_account']=$month_account;
            $this->returnMsg['data']['total_account']=$month_account;

            $this->returnMsg['message']='请求成功';

            $this->returnMsg['status']=200;
            return $this->returnMsg;
        }
    }



    //直属商户列表
    public function get_underling(){
        $page=input('page',1);
        $page=!empty(input('page'))?input('page'):1;
        $start_count=($page-1)* config('api_page_count');
        $underling_list=model('user')
            ->where('merchant_id',$this->online['user_id'])
            ->field('name,integral,underling,user_id')
            ->order('reg_time desc')
            ->limit($start_count,config('api_page_count'))
            ->select();
        $this->returnMsg['data']['page']=$page;
        //if(empty($underling_list)){
        //$this->returnMsg['message']='没有数据了';
        //return $this->returnMsg;
        //}
        foreach($underling_list as $key =>$val){
            if( !empty($val['name'])&& strlen($val['name'])>6){
                $underling_list[$key]['name']=mb_substr($val['name'],0,1,'utf-8')."*".mb_substr($val['name'],-1,1,'utf-8');
            }elseif( !empty($val['name'])){
                $underling_list[$key]['name']="*".mb_substr($val['name'],-1,1,'utf-8');
            }
            if(empty($val['name'])){
                $underling_list[$key]['name']='未认证';
            }

            $underling_list[$key]['user_id']=substr($val['user_id'],0,3)."****".substr($val['user_id'],-4);
        }
        $this->returnMsg['end_page']=0;
        if(count($underling_list)<config('api_page_count')){
            $this->returnMsg['end_page']=1;
        }
        $this->returnMsg['status']=200;
        $this->returnMsg['message']='请求成功';
        $this->returnMsg['data']['underling_list']=$underling_list;

        return $this->returnMsg;
    }


    //用户费率请求
    public function get_settle_rate(){

        $this->returnMsg['message']='请求成功';
        $this->returnMsg['status']=200;
        $this->returnMsg['data']['settle_rate']=$this->settle_rate;
        $this->returnMsg['data']['min_charge']=$this->sye_rate['min_charge'];
        $this->returnMsg['data']['extra_rate']=$this->sye_rate['extra_rate'];
        $this->returnMsg['data']['extra_rate_type']=$this->sye_rate['extra_rate_type'];

//        $this->returnMsg['data']['sye_rate']=$this->sye_rate;

        return $this->returnMsg;
    }
    //分润提现
    public function advance(){
		 $this->returnMsg['message'] = '接口更新，请稍候再试';
                return $this->returnMsg;
		$hour=date('H',time());
        if($hour<10 || $hour>21){
            $this->returnMsg['message']="请在 10:00 ~ 22:00 时间段内进行提现操作";
            return $this->returnMsg;
        }
		
        if(request()->isPost()){
			if(empty($this->online['debit_card'])){
				$this->returnMsg['message']='尚未绑定收款卡，无法提现';
                return $this->returnMsg;
			}
			
            $user_id=input('post.phone');
            $advance_amount=input('advance_amount/d');
            if(empty($advance_amount) ){
                $this->returnMsg['message']='分润提现金额不能为空';
                return $this->returnMsg;
            }
			$service=2;


            $merchant_data=model('user')
                ->alias('a')
                ->join('user_card b','a.debit_card=b.card_id')
                ->where('a.user_id',$user_id)
                ->field('a.balance,a.number,b.*')
                ->find();
            //未结算分润
            if(empty($merchant_data)){
                $this->returnMsg['message']='银行卡数据请求失败，请稍后再试';
                return $this->returnMsg;
            }
            if($this->sye_rate['period']==0){
                $period_time=0;
            }else{
                $period_time=strtotime( $this->sye_rate['period'].'day' );
            }


            $not_account=Db::table('commission')
                ->where('user_id',$user_id)
                ->where('commission_time','>',(time()-$period_time))
                ->where('commission_time','<',time())
                ->sum('commission_money');
            $not_account=empty($not_account)?0:(int)($not_account*100)/100;

            //可提现余额
            $balance_count=$merchant_data['balance']-$not_account;
            
            if($advance_amount +$service > $balance_count) {
                $this->returnMsg['message'] = '取现金额+手续费 大于当前可提现分润';
                return $this->returnMsg;
            }
            $sum=$advance_amount + $service;
            $user_res=db('user')
                ->where('user_id',$this->online['user_id'])
                ->setDec('balance',$sum);
            if(!$user_res){
                $this->returnMsg['message'] = '账户余额扣除失败,请重试';
                return $this->returnMsg;
            }

            $order_id=date('YmdHis',time());
            $pay_data=array();
            $pay_data['pay_order_id']=$order_id;
            $pay_data['pay_money']=$advance_amount;
            $pay_data['pay_service']=$service;
            $pay_data['pay_to_card']=$this->online['debit_card'];
            $pay_data['pay_time']=time();
            $pay_data['pay_status']='PAY_SUBMIT' ;
            $pay_data['user_id']=$this->online['user_id'];
            $add_res=Db::table('pay_orders')
                ->insert($pay_data);

          
			Vendor('hxpay.huixiangPay');
            $obj=new \PayAction();
            //请求汇享支付接口
            $merchant_data['order_id']=$order_id;

            $result= $obj->enchashment($this->online,$merchant_data,$advance_amount*100);
            $order_res=$result['data'];
			if(empty($result)){
                db('pay_orders')
                    ->where('pay_order_id',$order_id)
                    ->setField('pay_status','PAY_FAILURE');
                $user_res=db('user')
                    ->where('user_id',$this->online['user_id'])
                    ->setInc('balance',$sum);
                $this->returnMsg['message'] = '提现接口请求失败，请联系客服';
                return $this->returnMsg;
            }
            if(empty($order_res)){
                db('pay_orders')
                    ->where('pay_order_id',$order_id)
                    ->setField('pay_status','PAY_FAILURE');
                $user_res=db('user')
                    ->where('user_id',$this->online['user_id'])
                    ->setInc('balance',$sum);
                $this->returnMsg['message'] = '提现订单生成失败，请稍后再试';
                return $this->returnMsg;
            }


            if ($result['resp_code'] !== '000000') {
                db('pay_orders')
                    ->where('pay_order_id',$order_id)
                    ->setField('pay_status','PAY_FAILURE');
                $user_res=db('user')
                    ->where('user_id',$this->online['user_id'])
                    ->setInc('balance',$sum);

                $this->returnMsg['message'] = "提现请求失败，请稍后再试。";
                return $this->returnMsg;
            }
            if(empty($order_res)){
                db('pay_orders')
                    ->where('pay_order_id',$order_id)
                    ->setField('pay_status','PAY_FAILURE');
                $user_res=db('user')
                    ->where('user_id',$this->online['user_id'])
                    ->setInc('balance',$sum);
                $this->returnMsg['message'] = '提现请求失败，请稍后再试。';
                return $this->returnMsg;
            }
            db('pay_orders')
                ->where('pay_order_id',$order_id)
                ->update([
                    'pay_status'=>$order_res['resp_code'],
                    'pay_order_id'=>$result['client_trans_id']
                    ]);
            if($order_res['resp_code'] =='PAY_FAILURE' ){
                $user_res=db('user')
                    ->where('user_id',$this->online['user_id'])
                    ->setInc('balance',$sum);
                $this->returnMsg['message'] = '订单生成失败';
                return $this->returnMsg;
            }

            $pay_data['pay_to_card']=substr($pay_data['pay_to_card'],-4);
            $pay_data['bank_name']=$merchant_data['bank_name'];
            $this->returnMsg['message']="下单成功，请等待款项到账";
            $this->returnMsg['data']=$pay_data;
            $this->returnMsg['status']=200;
            return $this->returnMsg;

        }elseif(request()->isGet()){
           
        }
    }
	//获取分润体现记录
	public function get_pay_orders(){
		 $page=input('page',1);


		$page=!empty(input('page'))?input('page'):1;
		$start_count=($page-1)* config('api_page_count');
		$lists=Db::table('pay_orders')
			->alias('a')
			//->join('user_card b','a.pay_to_card=b.card_id')
			->where('a.user_id',$this->online['user_id'])
			->limit($start_count,config('api_page_count'))
			//->field('a.*,b.bank_name')
			->field('a.*')
			->order('a.pay_time desc')
			->select();
		foreach($lists as $key =>$val){
			$lists[$key]['pay_time']=date('Y-m-d H:i:s',$val['pay_time']);
			$lists[$key]['pay_to_card']=substr($val['pay_to_card'],-4);
			 if($lists[$key]['pay_status']=="PAY_FAILURE"){
				$lists[$key]['pay_status']="下单失败";
			}elseif($lists[$key]['pay_status']=="PAY_SUBMIT"){
				$lists[$key]['pay_status']="处理中";
			}else{
				$lists[$key]['pay_status']="提现成功";
			}
			unset($lists[$key]['user_id']);
			unset($lists[$key]['id']);
		}
		$this->returnMsg['end_page']=0;
		if(count($lists)<config('api_page_count')){
			$this->returnMsg['end_page']=1;
		}
		$this->returnMsg['data']['page']=$page;
		$this->returnMsg['data']['list']=$lists;
		$this->returnMsg['message']='请求成功';

		$this->returnMsg['status']=200;
		return $this->returnMsg;
	}

//    public function advance(){
//        if(request()->isPost()){
//            $user_id=input('post.phone');
//            $advance_amount=input('advance_amount/d');
//            if(empty($advance_amount) || $advance_amount<=0){
//                $this->returnMsg['message']='请输入有效取款金额';
//                return $this->returnMsg;
//            }
//            $merchant_data=model('user')
//                ->alias('a')
//                ->join('user_card b','a.debit_card=b.card_id')
//                ->where('a.user_id',$user_id)
//                ->field('a.balance,a.number,b.*')
//                ->find();
//            $this->returnMsg['sss']=$advance_amount;
//            //未结算分润
//            $not_account=Db::table('commission')
//                ->where('user_id',$user_id)
//                ->where('commission_time','>',(time()-604800))
//                ->where('commission_time','<',time())
//                ->field('sum(commission_money) as sum')
//                //->fetchSql(true)
//                ->find()['sum'];
//            $not_account=empty($not_account)?0:$not_account;
//            //可提现余额
//            $balance_count=$merchant_data['balance']-$not_account;
//            $this->returnMsg['sssz']=$balance_count;
//            if($advance_amount>$balance_count){
//                $this->returnMsg['message']='取现金额大于当前可提现分润';
//                return $this->returnMsg;
//            }
//
//
//            $order_id=time()+$this->random(4);
//            $post_data=[
//                'sp_id'=>1086,
//                'mch_id'=>$this->online['mcht_no'],
//                //'mch_id'=>100050000000363,
//                'out_trade_no'=>$order_id,
//                'total_fee'=>($advance_amount-2)*100,
//                'body'=>'分润提现',
//                'acc_type'=>'PERSONNEL',
//                'card_name'=>$merchant_data['card_name'],
//                'card_no'=>$merchant_data['card_id'],
//                'bank_name'=>$merchant_data['bank_name'],
//                'bank_no'=>$merchant_data['bank_no'],
//                'id_type'=>'01',
//                'id_no'=>$merchant_data['number'],
//                'nonce_str'=>$this->random(4,1)
//            ];
//            $bodys=$this->sbt_sign($post_data)['data'];
//            $url=config('sbt_api_url').'/gate/accountsvr/distill';
//            $result=$this->curl_allinfo($url,false,$bodys);
//            $this->returnMsg['order_id']=$order_id;
//            $this->returnMsg['data']=$result;
////            return $this->returnMsg;
//
//            if(empty($result)){
//                $this->returnMsg['message'] = '订单生成失败';
//                return $this->returnMsg;
//            }
//            if ($result->status !== 'SUCCESS') {
//                $this->returnMsg['message'] = $result->message;
//                return $this->returnMsg;
//            }
//            if($result->trade_state=="FAIL"){
//                $this->returnMsg['message'] = $result->err_msg;
//                return $this->returnMsg;
//            }
//            return $balance_count;
//        }
//    }

    public function getQrcode(){
        //带LOGO
        // $url = 'http://mydd.0317cn.net/index.php/Home/Logo/res/users_id/'.$users_id; //二维码内容
        // $errorCorrectionLevel = 'L';//容错级别
        // $matrixPointSize = 9;//生成图片大小
        // //生成二维码图片
        // Vendor('phpqrcode.phpqrcode');
        // $object = new \QRcode();
        // $ad = 'erweima/'.$users_id.'.jpg';
        // $object->png($url, $ad, $errorCorrectionLevel, $matrixPointSize, 2);
        // $logo = 'erweima/2.jpg';//准备好的logo图片
        // $QR = 'erweima/'.$users_id.'.jpg';//已经生成的原始二维码图

        // if ($logo !== FALSE) {
        //   $QR = imagecreatefromstring(file_get_contents($QR));
        //   $logo = imagecreatefromstring(file_get_contents($logo));
        //   $QR_width = imagesx($QR);//二维码图片宽度
        //   $QR_height = imagesy($QR);//二维码图片高度
        //   $logo_width = imagesx($logo);//logo图片宽度
        //   $logo_height = imagesy($logo);//logo图片高度
        //   $logo_qr_width = $QR_width / 5;
        //   $scale = $logo_width/$logo_qr_width;
        //   $logo_qr_height = $logo_height/$scale;
        //   $from_width = ($QR_width - $logo_qr_width) / 2;
        //   //重新组合图片并调整大小
        //   imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width,
        //   $logo_qr_height, $logo_width, $logo_height);
        // }
        //输出图片  带logo图片
        // imagepng($QR, 'erweima/'.$users_id.'.png');
        $user_id=$this->online['user_id'];
        $url="http://".$_SERVER['HTTP_HOST'].url('index/reg/index')."?merchant_id=".$user_id;
        $level=3;
        $size=4;

        Vendor('Phpqrcode.phpqrcode');
        $errorCorrectionLevel =intval($level) ;//容错级别
        $matrixPointSize = intval($size);//生成图片大小
        //生成二维码图片
        $object = new \QRcode();
        $file_path="./public/qrcode/".md5($user_id).".png";
        $object->png($url, $file_path, $errorCorrectionLevel, $matrixPointSize, 2);
        if(empty($this->online['generalize'])){
            $generalize=$this->mark_generalize();
            $res=Db::table('user')
                ->where('ids',$this->online['ids'])
                ->update(['generalize'=>$generalize]);
            if($res==0){
                $this->returnMsg['message']='生成推广码失败';
                return $this->returnMsg;
            }else{
                $this->returnMsg['generalize']=$generalize;
            }
        }else{
            $this->returnMsg['generalize']=$this->online['generalize'];
        }

        $this->returnMsg['data']=$file_path;
        $this->returnMsg['status']=200;
        $this->returnMsg['message']="请求成功";
        return $this->returnMsg;
    }
    public function mark_generalize(){
        $str='';
        $str.=$this->random(1,1).$this->online['ids'].substr(time(),-3);
        return $str;
    }



}
