<?php
namespace app\admin\controller;
use think\Controller;
use think\Db;
use app\api;
class Config extends Online
{
    protected $sye_rate;
    protected $role_rate;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $sye_rate=Db::table('rate')
            ->where('id',1)
            ->field('settle_rate')
            ->find()['settle_rate'];
        $this->sye_rate=$sye_rate;
        $role_rate=Db::table('role')
            ->where("role_id",$this->role_id)
            ->field('settle_rate')
            ->find()['settle_rate'];
        $this->role_rate=$role_rate;
    }

    public function index()
    {
        if(request()->isGet()){
            $id=input('id/d',1);
            $this->assign('settle_rate',$this->sye_rate);
            $rate_data=Db::table('rate')
                ->where('id',$id)
                ->find();
            $this->assign('rate_data',$rate_data);

            $this->assign("sye_rate",$this->sye_rate);
            return $this->fetch('rate');
        }elseif(request()->isPost()){
            $role_id=input('role_id');
            if(empty($role_id)){
                $this->returnMsg['message']='角色id不能为空';
                return $this->returnMsg;
            }
            $role_data=Db::table('role')
                ->where('role_id',$role_id)
                ->find();
            $this->returnMsg['status']=200;
            $this->returnMsg['message']='请求成功';
            $this->returnMsg['data']=$role_data;
            return $this->returnMsg;
        }
    }

    public function merchant()
    {
        if(request()->isGet()){
            if($this->role_id==1){
                $this->assign('settle_rate',$this->sye_rate);
            }else{
                $rate_data=Db::table('merchant')
                    ->where("merchant_id",$this->user_id)
                    ->field('settle_rate')
                    ->find()['settle_rate'];
                if(empty($rate_data)){
                    $rate_data=$this->role_rate;
                }
                $this->assign('settle_rate',$rate_data);
            }
            $this->assign("sye_rate",$this->sye_rate);
            return $this->fetch('rate');
        }
    }

    //角色列表
    public function lists(){
        if(request()->isGet()){
            $where_data=" role_id >1 and role_id<5 ";
            $count=Db::table('role')
                ->field('count(role_id) as count')
                ->where($where_data)
                ->find()['count'];
            $list=[];
            $page='';
            if(!empty($count)){
                $list = Db::table('role')
                    ->where($where_data)
                    ->paginate(5,$count)
                    ->each(function($item, $key){
                    });
                $page = $list->render();
            }
            // 模板变量赋值
            $this->assign('list', $list);
            $this->assign('page', $page);
            // 渲染模板输出
            $this->assign("sye_rate",$this->sye_rate);
            return $this->fetch('lists');
        }
    }

    public function update(){
        if(request()->isPost()){
            $id=input('id');
            $settle_rate=input('post.settle_rate',0.005);
            $extra_rate_type=input('post.extra_rate_type',"AMOUNT");
            $extra_rate=input('post.extra_rate',200);
            $min_charge=input('post.min_charge',300);
            $parent=input('parent',0.007);
            $superior=input('superior',0.003);
            if($extra_rate<1){
                $extra_rate_type="RATE";
            }
            if(empty($id)){
                $this->returnMsg['message']='请选择设定提现模式';
                return $this->returnMsg;
            }
            $save_data=[
                'settle_rate'=>  $settle_rate,
                'extra_rate_type'=>$extra_rate_type,
                'extra_rate'=>$extra_rate,
                'min_charge'=>$min_charge,
                'parent'=>$parent,
                'superior'=>$superior,
                'update_time'=>time()
            ];

            $admin=Db::table('rate')
                ->where('id',$id)
                ->update($save_data);
            if($admin==0){
                $this->returnMsg['message']='写入失败';
                return $this->returnMsg;
            }

            $this->returnMsg['url']=url('charge/index')."?id=".$id;
            $this->returnMsg['message']='设定成功';
            $this->returnMsg['status']=200;
            return $this->returnMsg;

        }
    }

    //代理商汇率修改
    public function role_rate(){
        $settle_rate=input('post.settle_rate');
        $role_id=input('post.role_id');
        $save_data=input('post.');
        if($settle_rate>$this->sye_rate){
            $this->returnMsg['message']='输入汇率不能高于平台最高汇率';
            return $this->returnMsg;
        }
        $result=Db::table('role')
            ->where("role_id",$role_id)
            ->update($save_data);

        if(!$result){
            $this->returnMsg['message']='更新失败';
            return $this->returnMsg;
        }
        $this->returnMsg['message']='更新成功';
        $this->returnMsg['status']=200;
        return $this->returnMsg;
    }

    public function get_mcht(){
        $user_list=Db::table("user")
            ->field("mcht_no,secretKey")
            ->where("role_id",'5')
            ->where("merchant_id",'0')
            ->select();
        dump($user_list);
        foreach($user_list as $val){
            $reg_data = [
                'sp_id' => config('sp_id'),
                'mcht_no' => $val['mcht_no'],
                'busi_type' => 'EPAYS',
                'settle_type' => 'REAL_PAY',
                'settle_rate' => 0.005,
                'extra_rate_type' => 'AMOUNT',
                'extra_rate' => 200,
                'nonce_str' => $this->random(4, 1)
            ];
            $reg_data = $this->sbt_sign($reg_data,config('secretKey'));
            $url = config('sbt_api_url'). '/gate/msvr/busiratemodify';
            $result_reg = $this->curl_allinfo($url, false, $reg_data['data']);

            if(empty($result_reg)){
                $this->returnMsg['message'] = '认证失败';
                return $this->returnMsg;
            }
            if ($result_reg->status !== 'SUCCESS') {
                $this->returnMsg['message'] = $result_reg->message;
                return $this->returnMsg;
            }
            if($result_reg->result_code!=="SUCCESS"){
                $this->returnMsg['message'] = $result_reg->err_msg;
                return $this->returnMsg;
            }
            $this->returnMsg['status']=200;
            return $this->returnMsg;
        }
    }
    public function seek_mcht(){
        $reg_data = [
            'sp_id' => config('sp_id'),
            'mcht_no' => 108650000000006,
            'nonce_str' => $this->random(4, 1)
        ];
        $reg_data = $this->sbt_sign($reg_data,config('secretKey'));
        $url = config('sbt_api_url'). '/gate/msvr/mchtbaseqry';
        $result_reg = $this->curl_allinfo($url, false, $reg_data['data']);
        dump($reg_data);
        dump($result_reg);
    }

}
